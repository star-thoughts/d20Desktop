<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Fiction.Windows"
                    xmlns:resources="clr-namespace:Fiction.Windows.Resources">
    <!--  Converters  -->
    <BooleanToVisibilityConverter x:Key="BooleanToVisibility" />
    <!--  Default style for all Context Menus  -->
    <Style TargetType="{x:Type ContextMenu}">
        <Setter Property="DataContext"
                Value="{Binding RelativeSource={RelativeSource Self}, Path=PlacementTarget.DataContext}" />
    </Style>
    <!--  Default style for all GridSplitter  -->
    <Style TargetType="{x:Type GridSplitter}">
        <Setter Property="MinHeight"
                Value="4" />
        <Setter Property="MinWidth"
                Value="4" />
        <Setter Property="Background"
                Value="Transparent" />
    </Style>
    <Style x:Key="HeaderText"
           TargetType="{x:Type TextBlock}"
           BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="FontWeight"
                Value="Bold" />
        <Setter Property="FontStyle"
                Value="Italic" />
        <Setter Property="LayoutTransform">
            <Setter.Value>
                <ScaleTransform ScaleX="1.5"
                                ScaleY="1.5" />
            </Setter.Value>
        </Setter>
    </Style>
    <LinearGradientBrush x:Key="FadeFromLeftBrush"
                         StartPoint="0,0"
                         EndPoint="1,0">
        <GradientStop Color="Transparent"
                      Offset="0.0" />
        <GradientStop Color="Black"
                      Offset="1.0" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="FadeToLeftGroupBrush"
                         StartPoint="0,0"
                         EndPoint="1,0">
        <GradientStop Color="Blue"
                      Offset="0.0" />
        <GradientStop Color="Transparent"
                      Offset="1.0" />
    </LinearGradientBrush>
    <LinearGradientBrush x:Key="VerticalFadeFromCenterBrush"
                         StartPoint="0,0"
                         EndPoint="0,1">
        <GradientStop Color="Transparent"
                      Offset="0.0" />
        <GradientStop Color="Black"
                      Offset="0.5" />
        <GradientStop Color="Transparent"
                      Offset="1.0" />
    </LinearGradientBrush>
    <!--  Style for ListViewItem with embedded controls  -->
    <Style x:Key="EmbeddedListViewItemStyle"
           TargetType="{x:Type ListViewItem}">
        <Setter Property="HorizontalContentAlignment"
                Value="Stretch" />
    </Style>
    <!--  DataTemplate used by ListViewHelper  -->
    <DataTemplate x:Key="HeaderTemplateDescending">
        <DockPanel>
            <TextBlock HorizontalAlignment="Center"
                       Text="{Binding}" />
            <Path x:Name="arrow"
                  StrokeThickness="1"
                  Fill="DarkGray"
                  Data="M 5,10 L 15,10 L 10,5" />
        </DockPanel>
    </DataTemplate>
    <!--  DataTemplate used by ListViewHelper  -->
    <DataTemplate x:Key="HeaderTemplateAscending">
        <DockPanel>
            <TextBlock HorizontalAlignment="Center"
                       Text="{Binding}" />
            <Path x:Name="arrow"
                  StrokeThickness="1"
                  Fill="DarkGray"
                  Data="M 5,5 L 10,10 L 15,5" />
        </DockPanel>
    </DataTemplate>
    <!--  ListView Embedded Text Box  -->
    <Style x:Key="ListViewEmbeddedTextBoxStyle"
           TargetType="{x:Type TextBox}">
        <Setter Property="BorderBrush"
                Value="{x:Null}" />
        <Setter Property="BorderThickness"
                Value="0" />
        <Setter Property="Padding"
                Value="4,0" />
        <Setter Property="Margin"
                Value="4,0" />
        <Setter Property="IsEnabled"
                Value="True" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type ListViewItem}}, Path=IsSelected}"
                         Value="False">
                <Setter Property="IsEnabled"
                        Value="False" />
                <Setter Property="Background"
                        Value="Transparent" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
    <!--  ListView Embedded CheckBox-->
    <Style x:Key="ListViewEmbeddedCheckBoxStyle"
           TargetType="{x:Type CheckBox}">
        <Setter Property="HorizontalAlignment"
                Value="Center" />
        <Setter Property="IsEnabled"
                Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}" />
    </Style>
    <Style x:Key="ListViewEmbeddedComboBoxStyle"
           TargetType="{x:Type ComboBox}">
        <Setter Property="BorderBrush"
                Value="{x:Null}" />
        <Setter Property="BorderThickness"
                Value="0" />
        <Setter Property="Padding"
                Value="0" />
        <Setter Property="Margin"
                Value="0" />
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="IsEnabled"
                Value="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListViewItem}}, Path=IsSelected}" />
    </Style>
    <VisualBrush x:Key="HatchBrush"
                 TileMode="Tile"
                 Viewport="0,0,10,10"
                 ViewportUnits="Absolute"
                 Viewbox="0,0,10,10"
                 ViewboxUnits="Absolute">
        <VisualBrush.Visual>
            <Canvas>
                <Rectangle Fill="Gray"
                           Width="10"
                           Height="10" />
                <Path Stroke="Black"
                      Data="M 0 0 l 10 10" />
                <Path Stroke="Black"
                      Data="M 0 10 l 10 -10" />
            </Canvas>
        </VisualBrush.Visual>
    </VisualBrush>
    <!--  OkCancel Template  -->
    <Style TargetType="{x:Type local:OkCancel}">
        <Setter Property="IsTabStop"
                Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:OkCancel}">
                    <Grid Grid.IsSharedSizeScope="True">
                        <Grid.RowDefinitions>
                            <!--  Border  -->
                            <RowDefinition Height="10" />
                            <!--  Buttons  -->
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <!--  Blank Space  -->
                            <ColumnDefinition Width="*" />
                            <!--  Ok Button  -->
                            <ColumnDefinition SharedSizeGroup="Buttons" />
                            <!--  Cancel Button  -->
                            <ColumnDefinition SharedSizeGroup="Buttons" />
                        </Grid.ColumnDefinitions>
                        <Border Grid.Row="0"
                                Grid.ColumnSpan="4"
                                x:Name="PART_UpperBorder"
                                BorderBrush="{StaticResource FadeFromLeftBrush}"
                                BorderThickness="0,2,0,0"
                                VerticalAlignment="Center" />
                        <Button Grid.Row="1"
                                Grid.Column="1"
                                x:Name="PART_OkButton"
                                Margin="0,0,4,0"
                                Content="{Binding Source={x:Static resources:WindowResources.OkButtonHeader}}"
                                Command="local:Commands.Ok"
                                IsDefault="True" />
                        <Button Grid.Row="1"
                                Grid.Column="2"
                                x:Name="PART_CancelButton"
                                Content="{Binding Source={x:Static resources:WindowResources.CancelButtonHeader}}"
                                Command="local:Commands.Cancel"
                                IsCancel="True" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type local:CloseBar}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:CloseBar}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Button Grid.Column="1"
                                Content="{Binding Source={x:Static resources:WindowResources.CloseButton}}"
                                Command="local:Commands.Close" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--  AddEditRemove Template-->
    <Style TargetType="{x:Type local:AddEditRemove}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:AddEditRemove}">
                    <Grid Grid.IsSharedSizeScope="True">
                        <Grid.RowDefinitions>
                            <!--  Border  -->
                            <RowDefinition Height="10" />
                            <!--  Buttons  -->
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <!--  Blank Space  -->
                            <ColumnDefinition Width="*" />
                            <!--  Add Button  -->
                            <ColumnDefinition SharedSizeGroup="Buttons" />
                            <!--  Edit Button  -->
                            <ColumnDefinition SharedSizeGroup="Auto" />
                            <!--  Remove Button  -->
                            <ColumnDefinition SharedSizeGroup="Buttons" />
                        </Grid.ColumnDefinitions>
                        <Border Grid.Row="0"
                                Grid.ColumnSpan="4"
                                x:Name="PART_UpperBorder"
                                VerticalAlignment="Center"
                                BorderBrush="{StaticResource FadeFromLeftBrush}"
                                BorderThickness="0,2,0,0" />
                        <Button Grid.Row="1"
                                Grid.Column="1"
                                x:Name="PART_AddButton"
                                Margin="0,0,4,0"
                                Content="{Binding Source={x:Static resources:WindowResources.AddButtonHeader}}"
                                Command="local:Commands.Add" />
                        <Grid Grid.Row="1"
                              Grid.Column="2"
                              Visibility="{TemplateBinding Property=AllowEdit, Converter={StaticResource BooleanToVisibility}}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition SharedSizeGroup="Buttons" />
                            </Grid.ColumnDefinitions>
                            <Button x:Name="PART_EditButton"
                                    Content="{Binding Source={x:Static resources:WindowResources.EditButtonHeader}}"
                                    Command="local:Commands.Edit"
                                    Margin="4,0" />
                        </Grid>
                        <Button Grid.Row="1"
                                Grid.Column="3"
                                x:Name="PART_RemoveButton"
                                Margin="4,0,0,0"
                                Content="{Binding Source={x:Static resources:WindowResources.RemoveButtonHeader}}"
                                Command="local:Commands.Remove"
                                CommandParameter="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=RemoveParameter}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type local:ZoomViewer}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ZoomViewer}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <ScrollContentPresenter x:Name="PART_ContentPresenter"
                                                CanContentScroll="True"
                                                CanHorizontallyScroll="True"
                                                CanVerticallyScroll="True">
                            <ScrollContentPresenter.LayoutTransform>
                                <ScaleTransform ScaleX="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Zoom}"
                                                ScaleY="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Zoom}" />
                            </ScrollContentPresenter.LayoutTransform>
                        </ScrollContentPresenter>
                        <ScrollBar Name="PART_VerticalScrollBar"
                                   Grid.Column="1"
                                   Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=VerticalOffset, Mode=OneWay}"
                                   Maximum="{TemplateBinding ScrollableHeight}"
                                   ViewportSize="{TemplateBinding ViewportHeight}"
                                   Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                                   AutomationProperties.AutomationId="VerticalScrollBar" />
                        <ScrollBar Name="PART_HorizontalScrollBar"
                                   Orientation="Horizontal"
                                   Grid.Row="1"
                                   Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=HorizontalOffset, Mode=OneWay}"
                                   Maximum="{TemplateBinding ScrollableWidth}"
                                   ViewportSize="{TemplateBinding ViewportWidth}"
                                   Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                                   AutomationProperties.AutomationId="HorizontalScrollBar" />

                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type local:HorizontalListView}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <StackPanel Orientation="Horizontal">
                        <ItemsControl ItemsSource="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:HorizontalListView}}, Path=ItemsSource}">
                            <ItemsControl.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <StackPanel Orientation="Horizontal" />
                                </ItemsPanelTemplate>
                            </ItemsControl.ItemsPanel>
                            <ItemsControl.ItemTemplate>
                                <DataTemplate>
                                    <StackPanel Orientation="Horizontal">
                                        <TextBlock Text=", "
                                                   Name="commaBlock" />
                                        <ContentPresenter Content="{Binding}"
                                                          ContentTemplate="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:HorizontalListView}}, Path=ItemTemplate}" />
                                        <TextBlock x:Name="RemoveLink">
                            <Hyperlink Command="local:Commands.Remove"
                                            CommandParameter="{Binding}">-
                            </Hyperlink></TextBlock>
                                    </StackPanel>
                                    <DataTemplate.Triggers>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource PreviousData}}"
                                                     Value="{x:Null}">
                                            <Setter Property="Visibility"
                                                    Value="Collapsed"
                                                    TargetName="commaBlock" />
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:HorizontalListView}}, Path=ShowRemove}"
                                                     Value="False">
                                            <Setter Property="Visibility"
                                                    Value="Collapsed"
                                                    TargetName="RemoveLink" />
                                        </DataTrigger>
                                    </DataTemplate.Triggers>
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>
                        <StackPanel Orientation="Horizontal"
                                    Visibility="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:HorizontalListView}}, Path=ShowAdd, Converter={StaticResource BooleanToVisibility}}">
                            <TextBlock Text="/">
                                <TextBlock.Style>
                                    <Style TargetType="{x:Type TextBlock}">
                                        <Setter Property="Visibility"
                                                Value="Visible" />
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:HorizontalListView}}, Path=ItemsSource.Count, FallbackValue=0}"
                                                         Value="0">
                                                <Setter Property="Visibility"
                                                        Value="Collapsed" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                            <TextBlock><Hyperlink Command="local:Commands.Add"
                                                  CommandParameter="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:HorizontalListView}}, Path=AddCommandParameter}">+</Hyperlink></TextBlock>
                        </StackPanel>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
